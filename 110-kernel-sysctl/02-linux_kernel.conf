#
# File: 02-linux_kernel.conf
# Path: /etc/sysctl.d
# Title: Minimize revealing internal kernel-based address pointer
# Description:
#
#   The default coredump filename is "core".  
#   By setting core_uses_pid to 1, the coredump 
#   filename becomes core.PID.  If core_pattern does 
#   not include "%p" (default does not) and 
#   core_uses_pid is set, then .PID will be appended 
#   to the filename.
#
kernel.core_uses_pid = 1

#   This toggle indicates whether restrictions are 
#   placed on exposing kernel addresses via /proc and 
#   other interfaces.
#
#   When kptr_restrict is set to 0 (the default) the 
#   address is hashed before printing. (This is the 
#   equivalent to %p.)
#
#   When kptr_restrict is set to (1), kernel pointers 
#   printed using the %pK format specifier will be 
#   replaced with 0's unless the user has CAP_SYSLOG 
#   and effective user and group ids are equal to the 
#   real ids. This is because %pK checks are done at 
#   read() time rather than open() time, so if 
#   permissions are elevated between the open() and 
#   the read() (e.g via a setuid binary) then %pK 
#   will not leak kernel pointers to unprivileged 
#   users. Note, this is a temporary solution only. 
#   The correct long-term solution is to do the 
#   permission checks at open() time. Consider 
#   removing world read permissions from files that 
#   use %pK, and using dmesg_restrict to protect 
#   against uses of %pK in dmesg(8) if leaking kernel 
#   pointer values to unprivileged users is a concern.
#
#   When kptr_restrict is set to (2), kernel pointers 
#   printed using %pK will be replaced with 0's 
#   regardless of privileges.
#
# Reference:
#   * https://lwn.net/Articles/420403/
#
kernel.kptr_restrict = 2

# 0=disable, 1=enable all
# Debian kernels have this set to 0 (disable the key)
# See https://www.kernel.org/doc/Documentation/sysrq.txt
# 0=disable, 1=enable all, >1 bitmask of sysrq functions
# See https://www.kernel.org/doc/html/latest/admin-guide/sysrq.html
# for what other values do
#kernel.sysrq=438
kernel.sysrq = 0
