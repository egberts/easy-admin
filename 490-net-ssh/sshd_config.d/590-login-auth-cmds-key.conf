
# AuthorizedKeysCommandUser specifies the user under
# whose account the AuthorizedKeysCommand is run.
# It is recommended to use a dedicated user that has
# no other role on the host than running authorized
# keys commands.  If AuthorizedKeysCommand is
# specified but AuthorizedKeysCommandUser is not, then
# sshd(8) will refuse to start.
#
# AuthorizedKeysCommandUser default is not to use its keyword.
#
# CLI option: -o AuthorizedKeysCommandUser=
# Default: (not defined, not used)
# options.authorized_keys_command_user[]/main()
# options.authorized_keys_command_user[]/user_key_command_allowed2()/user_key_allowed()/userauth_pubkey()/*method_pubkey[]/
# options.authorized_keys_command_user[]/user_key_command_allowed2()/user_key_allowed()/auth2-pubkey.c

# AuthorizedKeysCommand specifies a program to be used
# to look up the user's public keys.
# The program must be owned by root, not writable by
# group or others and specified by an absolute path.
# Arguments to AuthorizedKeysCommand accept the tokens
# described in the TOKENS section of sshd_config(5)
# man page.  If no arguments are specified then the
# username of the target user is used.
#
# The program should produce on standard output zero
# or more lines of authorized_keys output (see
# AUTHORIZED_KEYS in sshd(8)).  If a key supplied by
# AuthorizedKeysCommand does not successfully
# authenticate and authorize the user then public key
# authentication continues using the usual
# AuthorizedKeysFile files.  By default, no
# AuthorizedKeysCommand is run.
# Valid values are: 'none', '', and a command line.
#
# AuthorizedKeysCommand accepts the tokens %%, %f, %h,
# %k, %t, %U, and %u.
#
# AuthorizedKeysCommandUser defaults to 'none'.
#
# CLI option: -o AUthorizedKeysCommand=
# Default: 'none'
# options.authorized_keys_command[]/main()
AuthorizedKeysCommand none

