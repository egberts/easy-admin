#
# File: 580-login-auth-cmds-princ.conf
# Path: /etc/ssh/sshd_config.d
# Title: Execute commands specific to cert-based SSH authentication
# Description:
#
#   When you're using certificate-based SSH authentication,
#   the server needs to verify which users are allowed to use
#   a certificate. Instead of storing a static list in
#   ~/.ssh/authorized_principals, you can dynamically provide
#   that list using the AuthorizedPrincipalsCommand.
#
#   AuthorizedPrincipalsCommandUser specifies the user
#   under whose account the AuthorizedPrincipalsCommand
#   is run.  It is recommended to use a dedicated user
#   that has no other role on the host than running
#   authorized principals commands.  If
#   AuthorizedPrincipalsCommand is specified but
#   AuthorizedPrincipalsCommandUser is not, then sshd(8)
#   will refuse to start.
#
#   It can access arguments like %u for the username:
#
#       AuthorizedPrincipalsCommand /usr/local/bin/fetch.sh %u
#
#   AuthorizedPrincipalsCommand specifies a program to
#   be used to generate the list of allowed certificate
#   principals as per AuthorizedPrincipalsFile.  The
#   program must be owned by root, not writable by group
#   or others and specified by an absolute path.
#   Arguments to AuthorizedPrincipalsCommand accept the
#   tokens described in the TOKENS section.  If no
#   arguments are specified then the username of the
#   target user is used.
#
#   The program should produce on standard output zero
#   or more lines of AuthorizedPrincipalsFile output.
#   If either AuthorizedPrincipalsCommand or
#   AuthorizedPrincipalsFile is specified, then
#   certificates offered by the client for
#   authentication must contain a principal that is
#   listed.
#
#   By default, no AuthorizedPrincipalsCommand is run.
#   'AuthorizedPrincipalsCommand' defaults to 'none'.
#   Valid values are 'none', '', and a valid command.
#
#   AuthorizedPrincipalsCommand accepts the tokens %%,
#   %F, %f, %h, %i, %K, %k, %s, %T, %t, %U, and %u.
#
#
#
#   The AuthorizedPrincipalsCommandUser controls the privileges
#   of that command â€” ensuring it doesn't run with root or
#   higher privileges than necessary.
#
#   'AuthorizedPrincipalsCommandUser' defaults to 'none'.
#
# CLI option: -o AuthorizedPrincipalsCommand=
# CLI option: -o AuthorizedPrincipalsCommandUser=
# Process Context: server_loop2()/main()/daemon
# Variable: options.authorized_principals_command[]/main()
# Variable: options.authorized_principals_command_user[]/main()
# Source (read): match_principals_command()/user_cert_trusted_ca()/user_key_allowed()/userauth_pubkey()/authmethod_lookup()/input_userauth_request()/input_service_request()/do_authentication2()/do_authentication()
# Source (write): options.authorized_principals_command[]/main()
#
AuthorizedPrincipalsCommand none
AuthorizedPrincipalsCommandUser none
