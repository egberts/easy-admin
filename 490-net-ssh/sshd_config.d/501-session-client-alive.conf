
# ClientAliveInterval sets a timeout interval in
# seconds after which if no data has been received
# from the client, sshd(8) will send a message through
# the encrypted channel to request a response from the
# client.
#
# ClientAliveInterval defaults to 0, indicating that
# these messages will not be sent to the client.
#
# Channel type: packet
# CLI option: -o ClientAliveInterval=
# Process context: session
# ssh->state->packet_timeout_ms/ssh_packet_set_timeout()/options.client_alive_interval/wait_until_can_do_something()/serverloop.c
# Default: 0
#
ClientAliveInterval 300

# ClientAliveCountMax sets the number of client alive
# messages which may be sent without sshd(8) receiving
# any messages back from the client.  If this
# threshold is reached while client alive messages are
# being sent, sshd will disconnect the client,
# terminating the session.  It is important to note
# that the use of client alive messages is very
# different from TCPKeepAlive.  The client alive
# messages are sent through the encrypted channel and
# therefore will not be spoofable.  The TCP keepalive
# option enabled by TCPKeepAlive is spoofable.  The
# client alive mechanism is valuable when the client
# or server depend on knowing when a connection has
# become inactive.
#
# Example: If ClientAliveInterval is set to 15,
# and ClientAliveCountMax is left at the
# default, unresponsive SSH clients will be
# disconnected after approximately 45 seconds.
#
# ClientAliveInterval defaults to '3'.
#
# Channel type: packet
# CLI option: -o ClientAliveInterval
# Process context: session
# variable: options.client_alive_count_max
# variable: ssh->state->packet_timeout_ms
# ssh->state->packet_timeout_ms/ssh_packet_set_timeout()/options.client_alive_interval/wait_until_can_do_something()/serverloop.c
# Default: 3
#
ClientAliveCountMax 2

