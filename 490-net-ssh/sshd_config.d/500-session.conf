#-------------------------------------------------------
# Last known execution trace ends here.
# Everything below is unknown placement
#-------------------------------------------------------

# SetEnv specifies one or more environment variables
# to set in child sessions started by sshd(8)
# as “NAME=VALUE”.  The environment value may be
# quoted (e.g. if it contains whitespace
# characters).  Environment variables set by SetEnv
# override the default environment and any variables
# specified by the user via AcceptEnv
# or PermitUserEnvironment.
#
# Any GSSAPI envvars get created here
# USER envvar gets created here
# HOME envvar gets created here
# PATH envvar gets created here
# MAIL envvar gets created here, only if UsePAM is yes.
# SHELL envvar gets created here
# TZ envvar gets created here
# TERM envvar gets created here
# DISPLAY envvar gets created here
# KRB5CCNAME envvar gets created here
# AUTHSTATE envvar gets created here, only in AIX OS platform.
# SSH_AUTHSOCKET env var gets created here
# SSH_CLIENT envvar gets created here
# Any envvar from sshd command line gets created here.
# SSH_CONNECTION envvar gets created here
# SSH_TUNNEL envvar gets created here
# SSH_USER_AUTH envvar gets created here
# SSH_TTY envvar gets created here
# SSH_ORIGINAL_COMMAND envvar gets created here
#
# CLI option: -o
# options.num_setenv
# options.setenv[]
# SetEnv defaults to nothing.

# PermitUserRC specifies whether any ~/.ssh/rc file
# is executed.
#
# CLI option: -o
# options.permit_user_rc/do_rc_file()
# PermitUserRC defaults to 'yes'.
PermitUserRc no

# Subsystem configures an external subsystem (e.g. file
# transfer daemon).  Arguments should be a subsystem
# name and a command (with optional arguments) to
# execute upon subsystem request.
#
# The command sftp-server implements the SFTP file
# transfer subsystem.
#
# Alternately the name internal-sftp implements an
# in-process SFTP server.  This may simplify
# configurations using ChrootDirectory to force a
# different filesystem root on clients.
#
# By default no subsystems are defined.
#
# WARNING:
#
# Both sftp-server and internal-sftp are part of OpenSSH. 
# The sftp-server is a standalone binary. The internal-sftp is 
# just a configuration keyword that tells sshd to use the SFTP 
# server code built-into the sshd, instead of running another 
# process (what would typically be the sftp-server).
#
# The internal-sftp was added much later (OpenSSH 4.9p1 in 2008?) 
# than the standalone sftp-server binary. But it is the default 
# by now. The sftp-server is now redundant and is kept probably 
# for a backward compatibility.
#
# I believe there's no reason to use the sftp-server for new installations.
#
# NOTE: Debian openssh-server package sets Subsystem
# option to 'sftp /usr/lib/openssh/sftp-server' as
# standard in /etc/ssh/sshd_config which are not
# the default in sshd(8):
#
# REFERENCE:
# [How to setup secure file servers (SSH/SFTP)](https://pilabor.com/blog/2021/04/how-to-setup-a-secure-file-server-with-ssh-sftp/)
#
# CLI option: -o
# options.num_subsystems/do_rc_file()
# options.subsystem_name[]
# options.subsystem_command[]
# options.subsystem_args[]
# Subsystem defaults to 'none'.
####Subsystem sftp /usr/lib/openssh/sftp-server -f AUTHPRIV -l INFO

# AllowAgentForwarding specifies whether ssh-agent(1)
# forwarding is permitted.
#
# Note: disabling agent forwarding does not improve
# security unless users are also denied shell access,
# as they can always install their own forwarders.
#
# Channel type: agent-forwarding
# CLI option: -o
# options.allow_agent_forwarding
# AllowAgentForwarding defaults to 'yes'.
AllowAgentForwarding no

# AuthorizedPrincipalsFile specifies a file that lists
# principal names that are accepted for certificate
# authentication.  When using certificates signed by a
# key listed in TrustedUserCAKeys, this file lists
# names, one of which must appear in the certificate
# for it to be accepted for authentication.  Names are
# listed one per line preceded by key options (as
# described in AUTHORIZED_KEYS FILE FORMAT in
# sshd(8)).  Empty lines and comments starting with
# ‘#’ are ignored.
#
# Arguments to AuthorizedPrincipalsFile accept the
# tokens described in the TOKENS section.  After
# expansion, AuthorizedPrincipalsFile is taken to be
# an absolute path or one relative to the user's home
# directory.  The default is none, i.e. not to use a
# principals file – in this case, the username of the
# user must appear in a certificate's principals list
# for it to be accepted.
#
# Note that AuthorizedPrincipalsFile is only used when
# authentication proceeds using a CA listed in
# TrustedUserCAKeys and is not consulted for
# certification authorities trusted via
# ~/.ssh/authorized_keys, though the principals= key
# option offers a similar facility (see sshd(8) for
# details).
#
# AuthorizedPrincipalsFile accepts the tokens %%, %h, %U, and %u.
#
# CLI option: -o
# AuthorizedPrincipalsFile defaults to 'none'.
AuthorizedPrincipalsFile none


# PermitListen specifies the addresses/ports on which a
# remote TCP port forwarding may listen.  The listen
# specification must be one of the following forms:
#
#     PermitListen port
#     PermitListen host:port
#
# Multiple permissions may be specified by separating
# them with whitespace.  An argument of any can be used
# to remove all restrictions and permit any listen
# requests.  An argument of none can be used to prohibit
# all listen requests.  The host name may contain
# wildcards as described in the PATTERNS section in
# ssh_config(5).  The wildcard ‘*’ can also be used in
# place of a port number to allow all ports.  By default
# all port forwarding listen requests are permitted.
# NOTE: the GatewayPorts option may further restrict
#       which addresses may be listened on.
# NOTE: ssh(1) will request a listen host of “localhost”
#       if no listen host was specifically requested,
#       and this this name is treated differently to
#       explicit localhost addresses of “127.0.0.1”
#       and “::1”.
#
# CLI option: -o
# options.permitted_listens[]
# PermitListen defaults to 'any'.
PermitListen none

# PermitOpen specifies the destinations to which TCP
# port forwarding is permitted.  The forwarding
# specification must be one of the following forms:
#
#     PermitOpen host:port
#     PermitOpen IPv4_addr:port
#     PermitOpen [IPv6_addr]:port
#
# Multiple forwards may be specified by separating them
# with whitespace.  An argument of any can be used to
# remove all restrictions and permit any forwarding
# requests.  An argument of none can be used to
# prohibit all forwarding requests.  The wildcard ‘*’
# can be used for host or port to allow all hosts or
# ports, respectively.  By default all port forwarding
# requests are permitted.
#
# CLI option: -o
# options.permitted_opens[]
# PermitOpen defaults to 'any'.
#
# Now 'none' due to CVE-2021-28041
PermitOpen none

# KbdInteractiveAuthentication specifies whether to
# allow keyboard-interactive authentication.  The
# argument to this keyword must be yes or no.
# KbdInteractiveAuthentication default is to use
# whatever value ChallengeResponseAuthentication is
# set to (which is also default yes).
#
# CLI option: -o
# Process Context: server_loop2 (server)
# Process Context: monitor (client)
# options.kbd_interactive_authentication/main()
# options.kbd_interactive_authentication/userauth_kbdinit()/method_kbdint()/main()
# options.kbd_interactive_authentication/mm_answer_pam_start()mm_start_pam()/DEAD-END
# KbdInteractiveAuthentication defaults to 'ChallengeResponseAuthentication'.
KbdInteractiveAuthentication yes

# PubkeyAuthOptions  TODO: finish this
# Valid values are: 'none', 'touch-required', and 'verify-required'
#
# options.pubkey_auth_options
# PubkeyAuthOptions defaults to 'none'.
#PubkeyAuthOptions verify-required
#PubkeyAuthOptions touch-required
#PubkeyAuthOptions none

